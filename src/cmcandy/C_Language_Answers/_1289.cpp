
#include <iostream>
#include <vector>
#include <algorithm>
using namespace ::std;
class Solution
{
public:
    int minFallingPathSum(vector<vector<int>> &grid)
    {
        // dp : 表示选该位置时的最小和
        int row = grid.size(), col = grid[0].size();
        vector<vector<int>> dp(row, vector<int>(col, 0));
        // init 第一排
        vector<vector<int>> smallest(2, vector<int>(2, 200));

        for (int i = 0; i < col; i++)
        {
            dp[0][i] = grid[0][i];
            if (smallest[0][0] > grid[0][i])
            {
                smallest[1][0] = smallest[0][0];
                smallest[0][0] = grid[0][i];

                smallest[1][1] = smallest[0][1];
                smallest[0][1] = i;
            }
            else if (smallest[1][0] > grid[0][i])
            {
                smallest[1][0] = grid[0][i];
                smallest[1][1] = i;
            }
        }
        for (int i = 1; i < row; i++)
        {
            vector<vector<int>> tmp(2, vector<int>(2, 100000000));
            for (int j = 0; j < col; j++)
            {
                if (smallest[0][1] == j)
                {
                    dp[i][j] = smallest[1][0] + grid[i][j];
                }
                else
                {
                    dp[i][j] = smallest[0][0] + grid[i][j];
                }
                // update tmp
                if (tmp[0][0] > dp[i][j])
                {
                    tmp[1][0] = tmp[0][0];
                    tmp[0][0] = dp[i][j];

                    tmp[1][1] = tmp[0][1];
                    tmp[0][1] = j;
                }
                else if (tmp[1][0] > dp[i][j])
                {
                    tmp[1][0] = dp[i][j];
                    tmp[1][1] = j;
                }
            }
            smallest = tmp;
        }
        return smallest[0][0];
    }
};

int main()
{
    // vector<vector<int>> nums = {{-73, 61, 43, -48, -36}, {3, 30, 27, 57, 10}, {96, -76, 84, 59, -15}, {5, -49, 76, 31, -7}, {97, 91, 61, -46, 67}};

    vector<vector<int>> nums = {{99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99}, {99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99}};
    Solution s;
    cout << s.minFallingPathSum(nums);
}
