#include <iostream>
#include <vector>
#include <queue>
#include <string>
#include <unordered_set>
#include <unordered_map>
using namespace ::std;

class Solution
{
public:
    int maxLength = 0;
    // 这换成动态规划可能会好一点
    // matLen表示以该点为起始点，最长的路径长度是多少
    vector<vector<int>> matLen;
    vector<vector<int>> matrix;
    int longestIncreasingPath(vector<vector<int>> &matrix)
    {
        // 用于在dfs开始时直接剪枝
        vector<vector<int>> tmp(matrix.size(), vector<int>(matrix[0].size(), 0));
        matLen = tmp;
        this->matrix = matrix;
        for (int i = 0; i < matrix.size(); i++)
        {
            for (int j = 0; j < matrix[0].size(); j++)
            {
                dfs(i, j, 1);
                maxLength = max(matLen[i][j],maxLength);
            }
        }
        return maxLength;
    }
    void dfs( int i, int j, int len)
    {
        if (matLen[i][j]!=0)
        {
            return;
        }
        matLen[i][j] = 1;

        //上下左右看看
        if (i > 0 && matrix[i][j] < matrix[i - 1][j])
        {
            dfs( i - 1, j, len + 1);
            matLen[i][j] = max(matLen[i-1][j]+1,matLen[i][j]);
        }
        if (j > 0 && matrix[i][j] < matrix[i][j - 1])
        {
            dfs(i, j - 1, len + 1);
            matLen[i][j] = max(matLen[i][j-1]+1,matLen[i][j]);
        }
        if (j < matrix[0].size() - 1 && matrix[i][j] < matrix[i][j + 1])
        {
            dfs( i, j + 1, len + 1);
            matLen[i][j] = max(matLen[i][j+1]+1,matLen[i][j]);
        }
        if (i < matrix.size() - 1 && matrix[i][j] < matrix[i + 1][j])
        {
            dfs( i + 1, j, len + 1);
            matLen[i][j] = max(matLen[i+1][j]+1,matLen[i][j]);
        }
    }
};

int main()
{
    // vector<vector<int>> mat = {{9, 9, 4}, {6, 6, 8}, {2, 1, 1}};
    vector<vector<int>> mat = {{19, 10, 19, 10, 19, 10, 3, 1, 6, 12, 10, 0, 4, 4, 3, 4, 17, 2, 3, 15, 6, 6, 8, 18}, {1, 17, 0, 2, 0, 12, 2, 16, 9, 4, 8, 6, 9, 13, 6, 12, 11, 13, 2, 1, 12, 16, 10, 4}, {18, 17, 6, 6, 2, 0, 19, 0, 19, 12, 17, 18, 13, 1, 19, 11, 10, 6, 3, 13, 8, 1, 12, 6}, {8, 3, 1, 5, 3, 15, 13, 6, 4, 7, 16, 9, 9, 10, 6, 2, 0, 15, 10, 19, 18, 6, 3, 11}, {10, 5, 6, 10, 17, 14, 3, 18, 5, 19, 18, 4, 0, 4, 18, 5, 7, 12, 14, 17, 8, 19, 12, 13}, {18, 13, 11, 1, 12, 16, 9, 1, 5, 17, 15, 17, 11, 8, 17, 0, 17, 5, 17, 6, 15, 7, 10, 3}, {2, 0, 7, 0, 6, 8, 19, 17, 18, 11, 17, 0, 2, 10, 13, 4, 10, 18, 12, 18, 14, 16, 6, 6}, {14, 8, 18, 0, 5, 13, 0, 12, 3, 7, 18, 12, 16, 12, 4, 13, 15, 5, 19, 8, 16, 12, 13, 9}, {19, 0, 3, 5, 3, 9, 11, 2, 14, 10, 13, 0, 1, 17, 10, 10, 4, 12, 9, 19, 13, 11, 3, 9}, {15, 7, 9, 2, 7, 11, 15, 19, 18, 18, 3, 2, 17, 3, 16, 12, 6, 17, 15, 3, 16, 15, 1, 2}, {3, 5, 11, 11, 5, 13, 15, 6, 5, 16, 19, 12, 15, 9, 16, 3, 0, 17, 8, 9, 12, 14, 13, 1}, {10, 2, 10, 9, 13, 7, 13, 18, 10, 8, 5, 2, 9, 19, 16, 16, 0, 6, 1, 7, 2, 5, 19, 0}};

    // vector<vector<int>> mat = {{0, 0, 12, 6, 15, 1, 12, 10, 12, 10, 6}, {6, 19, 6, 13, 5, 18, 17, 19, 7, 11, 13}, {8, 6, 9, 1, 15, 7, 10, 10, 3, 7, 18}, {2, 14, 12, 10, 17, 2, 3, 10, 4, 8, 3}, {8, 2, 19, 3, 19, 10, 17, 18, 12, 10, 8}, {0, 17, 14, 12, 10, 4, 8, 17, 15, 11, 19}, {13, 6, 14, 8, 16, 19, 12, 17, 16, 17, 8}, {7, 4, 6, 8, 3, 9, 19, 12, 4, 13, 0}, {18, 0, 16, 12, 10, 11, 8, 14, 6, 3, 0}, {10, 3, 14, 17, 19, 18, 10, 2, 11, 5, 19}, {6, 2, 2, 1, 8, 1, 11, 7, 7, 18, 1}, {11, 12, 16, 0, 9, 6, 8, 3, 12, 8, 15}, {5, 18, 17, 4, 11, 9, 9, 6, 8, 2, 4}, {3, 12, 7, 2, 9, 17, 14, 10, 14, 5, 0}};
    // vector<vector<int>> mat = {{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}, {19, 18, 17, 16, 15, 14, 13, 12, 11, 10}, {20, 21, 22, 23, 24, 25, 26, 27, 28, 29}, {39, 38, 37, 36, 35, 34, 33, 32, 31, 30}, {40, 41, 42, 43, 44, 45, 46, 47, 48, 49}, {59, 58, 57, 56, 55, 54, 53, 52, 51, 50}, {60, 61, 62, 63, 64, 65, 66, 67, 68, 69}, {79, 78, 77, 76, 75, 74, 73, 72, 71, 70}, {80, 81, 82, 83, 84, 85, 86, 87, 88, 89}, {99, 98, 97, 96, 95, 94, 93, 92, 91, 90}, {100, 101, 102, 103, 104, 105, 106, 107, 108, 109}, {119, 118, 117, 116, 115, 114, 113, 112, 111, 110}, {120, 121, 122, 123, 124, 125, 126, 127, 128, 129}, {139, 138, 137, 136, 135, 134, 133, 132, 131, 130}, {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}};
    for (int i = 0; i < mat.size(); i++)
    {
        for (int j = 0; j < mat[0].size(); j++)
        {
            cout << mat[i][j] << "\t";
        }
        cout << endl;
    }
    Solution s;
    cout << s.longestIncreasingPath(mat);
}
